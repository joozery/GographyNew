import { useState, useEffect } from "react";
import axios from "axios";
import { useParams } from "react-router-dom";
import { FaSpinner, FaTrash } from "react-icons/fa";
import ReactQuill from "react-quill";
import "react-quill/dist/quill.snow.css"; // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ò‡∏µ‡∏° snow
import { FiUploadCloud } from "react-icons/fi";
import Swal from "sweetalert2";
import { useNavigate } from "react-router-dom";
import CountryFlag from "../CountryFlag";

function AddTour() {
  const navigate = useNavigate();
  const { tourId } = useParams(); // ‚úÖ ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ tourId ‡∏à‡∏≤‡∏Å URL
  const [formData, setFormData] = useState({
    tour_name: "",
    // country_th: "",
    // country_en: "",
    country_id: "",
    highlight: "",
    price: "",
    start_date: "",
    end_date: "",
    duration: "",
    travel_type: "",
    locations: "",
    included: "",
    not_included: "",
    information: "",
    terms_conditions: "",
  });
  const [countries, setCountries] = useState([]); // ‚úÖ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
  const [days, setDays] = useState([]);
  const [image, setImage] = useState(null);
  const [previewImage, setPreviewImage] = useState(null);
  const [pdfFile, setPdfFile] = useState(null);
  const [previewPdf, setPreviewPdf] = useState(null);
  const [message, setMessage] = useState("");
  const [loading, setLoading] = useState(false); // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const [saving, setSaving] = useState(false); // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å

  const requirefield = <span className="text-red-700">*</span>;

  // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏à‡∏≤‡∏Å API
  useEffect(() => {
    axios
      .get("https://servergogo-app-209f1146e735.herokuapp.com/api/countries")
      .then((response) => setCountries(response.data))
      .catch((error) => console.error("Error loading countries:", error));
  }, []);

  const LoadData = async () => {
    if (tourId) {
      setLoading(true);
      axios
        .get(
          `https://servergogo-app-209f1146e735.herokuapp.com/api/tours/${tourId}`
        )
        .then((response) => {
          const tourData = response.data.tour;
          setFormData({
            ...tourData,
            start_date: tourData.start_date.split("T")[0],
            end_date: tourData.end_date.split("T")[0],
          });

          // setPdfFile(tourData.pdf_url);

          setDays(
            response.data.tour_days.map((day) => ({
              ...day,
              date: day.date.split("T")[0],
              time_schedule: day.time_schedule || [],
              images: day.images,
              //   images: day.images ? JSON.parse(day.images) : [], // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô Array
            }))
          );
          // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å API ‚Üí ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ previewImage
          if (tourData.image) {
            setPreviewImage(tourData.image);
          }
          if (tourData.pdf_url) {
            setPreviewPdf(tourData.pdf_url);
          } // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î PDF
        })
        .catch((error) => console.error("Error loading tour:", error))
        .finally(() => setLoading(false));
    }
  };
  // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡∏à‡∏≤‡∏Å API (‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)
  useEffect(() => {
    LoadData();
  }, []);

  //   useEffect(() => {
  //     console.log("formData",formData);
  //     console.log("days",days);
  //   }, [formData , days])

  useEffect(() => {
    console.log("day", days);
  }, [days]);

  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á
  const addDay = () => {
    setDays([
      ...days,
      {
        day_number: days.length + 1,
        date: "",
        location: "",
        description: "",
        time_schedule: [],
        images: [],
      },
    ]);
  };

  // ‚úÖ ‡∏•‡∏ö‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á
  const removeDay = (index) => {
    const updatedDays = [...days];
    updatedDays.splice(index, 1);
    setDays(updatedDays.map((day, i) => ({ ...day, day_number: i + 1 }))); // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï day_number
  };

  // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á
  const handleDayChange = (index, field, value) => {
    const updatedDays = [...days];

    if (
      typeof value === "string" &&
      value.includes("T") &&
      !isNaN(Date.parse(value))
    ) {
      updatedDays[index][field] = value.split("T")[0]; // ‡∏ï‡∏±‡∏î "T" ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô datetime
    } else {
      updatedDays[index][field] = value; // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏° ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà datetime
    }

    setDays(updatedDays);
  };

  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤
  const addSchedule = (dayIndex) => {
    const updatedDays = [...days];
    updatedDays[dayIndex].time_schedule.push({ time: "", activity: "" });
    setDays(updatedDays);
  };

  // ‚úÖ ‡∏•‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤
  const removeSchedule = (dayIndex, scheduleIndex) => {
    const updatedDays = [...days];
    updatedDays[dayIndex].time_schedule.splice(scheduleIndex, 1);
    setDays(updatedDays);
  };

  // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤
  const handleScheduleChange = (dayIndex, scheduleIndex, field, value) => {
    const updatedDays = [...days];
    updatedDays[dayIndex].time_schedule[scheduleIndex][field] = value;
    setDays(updatedDays);
  };

  // const handleFileChange = (e, type) => {
  //   const file = e.target.files[0];
  //   if (!file) return;

  //   if (type === "image") {
  //     setImage(file);
  //     setPreviewImage(URL.createObjectURL(file)); // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á Preview ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
  //   }

  //   if (type === "pdf_url") {
  //     setPdfFile(file);
  //     setPreviewPdf(URL.createObjectURL(file)); // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Preview PDF ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
  //   }
  // };

  const handleFileChange = (e, type) => {
    const file = e.target.files[0];
    if (!file) return;

    if (type === "image") {
      const allowedTypes = ["image/png", "image/jpeg", "image/jpg"];
      if (!allowedTypes.includes(file.type)) {
        alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô .png, .jpg ‡∏´‡∏£‡∏∑‡∏≠ .jpeg ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô");
        return;
      }

      setImage(file);
      setPreviewImage(URL.createObjectURL(file)); // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á Preview
    }

    if (type === "pdf_url") {
      if (file.type !== "application/pdf") {
        alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå PDF ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô");
        return;
      }

      setPdfFile(file);
      setPreviewPdf(URL.createObjectURL(file)); // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á Preview PDF
    }
  };

  const removeSingleImage = (dayIndex, imgIndex) => {
    setDays((prevDays) => {
      const updated = [...prevDays];
  
      const currentImages = [...(updated[dayIndex].images || [])]; // ‚úÖ clone ‡∏£‡∏π‡∏õ
      const filtered = currentImages.filter((_, i) => i !== imgIndex); // ‚úÖ ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ splice
  
      updated[dayIndex] = {
        ...updated[dayIndex], // ‚úÖ ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏°‡∏µ field ‡∏≠‡∏∑‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢
        images: filtered,
      };
  
      return updated;
    });
  };

  // ‚úÖ ‡∏•‡∏ö PDF
  const handleRemovePdf = () => {
    setPdfFile(null);
    setPreviewPdf(null);
    setFormData({ ...formData, pdf_url: "" }); // ‚úÖ ‡∏™‡πà‡∏á "" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ API ‡∏•‡∏ö PDF
  };

  const handleFileChangeDay = (dayIndex, files) => {
    const updatedDays = [...days];
    const currentImages = updatedDays[dayIndex].images || [];

    const newFiles = Array.from(files);

    // ‚úÖ ‡∏£‡∏ß‡∏°‡∏†‡∏≤‡∏û‡πÄ‡∏î‡∏¥‡∏° + ‡πÉ‡∏´‡∏°‡πà
    const combined = [...currentImages, ...newFiles];

    if (combined.length > 4) {
      Swal.fire({
        icon: "warning",
        title: "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 4 ‡∏£‡∏π‡∏õ",
        text: "‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 4 ‡∏£‡∏π‡∏õ‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô",
        confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
      });

      // ‚úÖ ‡∏ï‡∏±‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 4 ‡∏£‡∏π‡∏õ ‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏°‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï state
      return;
    }

    updatedDays[dayIndex].images = combined;
    setDays(updatedDays);
    // console.log(`üì∑ Day ${dayIndex} now has ${combined.length} image(s)`);
  };

  // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏´‡∏•‡∏±‡∏Å (Tour)
  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  // ‚úÖ Handle Change ‡∏à‡∏≤‡∏Å ReactQuill
  const handleQuillChange = (field, value) => {
    setFormData({ ...formData, [field]: value });
  };

  // ‚úÖ ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô
  const clearDayImages = (dayIndex) => {
    const updatedDays = [...days];
    updatedDays[dayIndex].images = []; // ‚úÖ ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏£‡∏π‡∏õ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    setDays(updatedDays);
  };

  // ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏õ API
  const handleSubmit = async (e) => {
    e.preventDefault();
    setSaving(true); // üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...
    const formDataToSend = new FormData();
    Object.keys(formData).forEach((key) =>
      formDataToSend.append(key, formData[key])
    );
    if (image) formDataToSend.append("image", image);
    if (pdfFile) {
      formDataToSend.append("pdf_url", pdfFile);
    } else {
      formDataToSend.append("pdf_url", ""); // ‚úÖ ‡∏•‡∏ö PDF ‚Üí ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
    }

    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏õ‡∏¢‡∏±‡∏á `images`
    formDataToSend.append(
      "tour_days",
      JSON.stringify(
        days.map((day) => ({
          ...day,
          images: day.images.filter((img) => typeof img === "string"), // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ URL ‡πÄ‡∏î‡∏¥‡∏°
        }))
      )
    );

    // ‚úÖ ‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô (`day_images_X`)
    days.forEach((day, index) => {
      if (day.images.length > 0) {
        day.images.forEach((file) => {
          if (typeof file !== "string") {
            formDataToSend.append(`day_images_${index}`, file); // ‚úÖ ‡∏™‡πà‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà
          }
        });
      }
    });

    console.log("üöÄ Data being sent to API:", {
      ...formData,
      image: image ? image.name : "No Image",
      tour_days: days.map((day, index) => ({
        ...day,
        images: day.images.map((img) =>
          typeof img === "string" ? img : img.name
        ), // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á
      })),
    });
    // return;

    try {
      if (tourId) {
        // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (PUT)
        const response = await axios.put(
          `https://servergogo-app-209f1146e735.herokuapp.com/api/tours/${tourId}`,
          formDataToSend,
          {
            headers: { "Content-Type": "multipart/form-data" },
          }
        );
        setMessage(response.data.message);
        if (response.data.message) {
          // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á SweetAlert2 ‡πÅ‡∏•‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ /admin/manage-tour
          Swal.fire({
            icon: "success",
            title: "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
            text: "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß",
            showConfirmButton: false,
            timer: 2000, // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏î‡πâ‡∏á‡∏Å‡∏•‡∏±‡∏ö
          }).then(() => {
            // navigate("/admin/manage-tour"); // ‚úÖ ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡∏ß‡∏£‡πå
            setPreviewPdf(response.data.pdf_url || null); // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Preview PDF ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
            LoadData();
          });
        }
      } else {
        const response = await axios.post(
          "https://servergogo-app-209f1146e735.herokuapp.com/api/tours",
          formDataToSend,
          {
            headers: { "Content-Type": "multipart/form-data" },
          }
        );
        console.log(response);
        setMessage(response.data.message);
        if (response.data.message) {
          // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á SweetAlert2 ‡πÅ‡∏•‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ /admin/manage-tour
          Swal.fire({
            icon: "success",
            title: "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
            text: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
            showConfirmButton: false,
            timer: 2000, // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏î‡πâ‡∏á‡∏Å‡∏•‡∏±‡∏ö
          }).then(() => {
            navigate("/admin/manage-tour"); // ‚úÖ ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡∏ß‡∏£‡πå
          });
        }
      }
    } catch (error) {
      setMessage(error.response?.data?.error || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î");
    } finally {
      setSaving(false); // ‚ùå ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à ‚Üí ‡∏õ‡∏¥‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ saving
    }
  };

  return (
    <div>
      <h2>{tourId ? "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏±‡∏ß‡∏£‡πå" : "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏±‡∏ß‡∏£‡πå"}</h2>

      {/* ‚úÖ Loading ‡∏ï‡∏≠‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• */}
      {loading ? (
        <div className="flex justify-center items-center py-10">
          <div className="flex items-center gap-3">
            <FaSpinner className="animate-spin text-purple-500 text-2xl" />
            <span className="font-semibold text-xl">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</span>
          </div>
        </div>
      ) : (
        <form onSubmit={handleSubmit} encType="multipart/form-data">
          {/* üîπ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡∏ß‡∏£‡πå */}
          <div className="">
            <div className="grid grid-cols-3 gap-3">
              <div className="flex flex-col justify-start items-start gap-2">
                <label className="block mt-4 font-bold">
                  ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏±‡∏ß‡∏£‡πå {requirefield}
                </label>
                <input
                  value={formData.tour_name}
                  className="border border-gray-200 rounded-lg p-2 h-12 w-full"
                  type="text"
                  name="tour_name"
                  placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏±‡∏ß‡∏£‡πå"
                  onChange={handleChange}
                  required
                />
              </div>
              {/* üîπ Dropdown ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® */}
              <div className="flex flex-col justify-start items-start gap-2">
                <label className="block mt-4 font-bold">
                  ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® {requirefield}
                </label>
                <select
                  value={formData.country_id}
                  onChange={handleChange}
                  name="country_id"
                  className="border border-gray-200 rounded-lg p-2 h-12 w-full"
                  required
                >
                  <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®</option>
                  {countries.map((country) => (
                    <option key={country.id} value={country.id}>
                      {country.name} ({country.name_th})
                    </option>
                  ))}
                </select>
              </div>
              <div className="flex flex-col justify-start items-start gap-2">
                <label className="block mt-4 font-bold">
                  ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà {requirefield}
                </label>
                <input
                  value={formData.locations}
                  className="border border-gray-200 rounded-lg p-2 h-12 w-full"
                  type="text"
                  name="locations"
                  placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö thai,canada,china ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"
                  onChange={handleChange}
                  required
                />
              </div>
              <div className="flex flex-col justify-start items-start gap-2">
                <label className="block mt-4 font-bold">
                  ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô {requirefield}
                </label>
                <input
                  value={formData.start_date}
                  className="border border-gray-200 rounded-lg p-2 h-12 w-full"
                  type="date"
                  name="start_date"
                  onChange={handleChange}
                  required
                />
              </div>
              <div className="flex flex-col justify-start items-start gap-2">
                <label className="block mt-4 font-bold">
                  ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î {requirefield}
                </label>
                <input
                  value={formData.end_date}
                  className="border border-gray-200 rounded-lg p-2 h-12 w-full"
                  type="date"
                  name="end_date"
                  onChange={handleChange}
                  required
                />
              </div>
              <div className="flex flex-col justify-start items-start gap-2">
                <label className="block mt-4 font-bold">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</label>
                <input
                  value={formData.travel_type}
                  className="border border-gray-200 rounded-lg p-2 h-12 w-full"
                  type="text"
                  name="travel_type"
                  placeholder="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å"
                  onChange={handleChange}
                />
              </div>
              <div className="flex flex-col justify-start items-start gap-2">
                <label className="block mt-4 font-bold">
                  ‡∏£‡∏≤‡∏Ñ‡∏≤ ‡∏ø {requirefield} (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏á‡∏¥‡∏ô)
                </label>
                <input
                  value={formData.price}
                  className="border border-gray-200 rounded-lg p-2 h-12 w-full"
                  type="text"
                  name="price"
                  placeholder="‡∏£‡∏≤‡∏Ñ‡∏≤"
                  onChange={handleChange}
                  required
                />
              </div>

              <div className="flex flex-col justify-start items-start gap-2">
                <label className="block mt-4 font-bold">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô</label>
                <input
                  value={formData.duration}
                  className="border border-gray-200 rounded-lg p-2 h-12 w-full"
                  type="text"
                  name="duration"
                  placeholder="‡πÄ‡∏ä‡πà‡∏ô 7 ‡∏ß‡∏±‡∏ô 5 ‡∏Ñ‡∏∑‡∏ô"
                  onChange={handleChange}
                />
              </div>

              <div className="flex flex-col justify-start items-start gap-2">
                <label className="block mt-4 font-bold">‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ</label>
                <input
                  value={formData.included}
                  className="border border-gray-200 rounded-lg p-2 h-12 w-full"
                  type="text"
                  name="included"
                  placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö ‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô,,‡∏ä‡πà‡∏≤‡∏á‡∏†‡∏≤‡∏û,,‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏Å ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"
                  onChange={handleChange}
                />
              </div>
              <div className="flex flex-col justify-start items-start gap-2">
                <label className="block mt-4 font-bold">‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ</label>
                <input
                  value={formData.not_included}
                  className="border border-gray-200 rounded-lg p-2 h-12 w-full"
                  type="text"
                  name="not_included"
                  placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°,,‡∏Ñ‡πà‡∏≤‡∏≠‡∏≤‡∏´‡∏≤‡∏£,,‡∏ï‡∏±‡πã‡∏ß‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ö‡∏¥‡∏ô ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"
                  onChange={handleChange}
                />
              </div>
              <div className="flex flex-col justify-start items-start gap-2">
                <label className="block mt-4 font-bold">‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏õ‡∏Å</label>
                <input
                  className="hidden"
                  type="file"
                  name="image"
                  id="fileUploadCover"
                  onChange={(e) => handleFileChange(e, "image")}
                  accept=".png, .jpg, .jpeg"
                />
                <label
                  htmlFor="fileUploadCover"
                  className="cursor-pointer w-1/2 h-12   flex justify-center items-center bg-indigo-500 text-white px-4 py-2 rounded-lg shadow hover:bg-indigo-600 transition gap-2"
                >
                  <FiUploadCloud size={20} /> ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏Å
                </label>
              </div>
              <div className="flex flex-col justify-start items-start gap-2">
                <label className="block mt-4 font-bold">‡πÑ‡∏ü‡∏•‡πå PDF</label>
                <input
                  className="hidden"
                  type="file"
                  name="pdf_url"
                  id="fileUploadPDF"
                  onChange={(e) => handleFileChange(e, "pdf_url")}
                  accept="application/pdf"
                />
                <label
                  htmlFor="fileUploadPDF"
                  className="cursor-pointer w-1/2 h-12   flex justify-center items-center bg-red-500 text-white px-4 py-2 rounded-lg shadow hover:bg-red-600 transition gap-2"
                >
                  <FiUploadCloud size={20} /> ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î PDF
                </label>
                {previewPdf && (
                  <div className="flex items-center gap-3 mt-2">
                    <a
                      href={previewPdf}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="text-blue-600 underline"
                    >
                      ‡∏î‡∏π‡πÑ‡∏ü‡∏•‡πå PDF
                    </a>
                    <button
                      type="button"
                      onClick={handleRemovePdf}
                      className="text-red-500"
                    >
                      <FaTrash size={16} />
                    </button>
                  </div>
                )}
              </div>
              {previewImage && (
                <div className="mt-3">
                  <img
                    src={previewImage}
                    alt="Tour Preview"
                    className="w-40 h-40 object-cover border"
                  />
                </div>
              )}
            </div>
            <div>
              {/* ‚úÖ Rich Text Editor - Highlight */}
              <div className="flex flex-col gap-2">
                <label className="block mt-4 font-bold">Highlight</label>
                <ReactQuill
                  value={formData.highlight}
                  onChange={(value) => handleQuillChange("highlight", value)}
                />
              </div>

              {/* ‚úÖ Rich Text Editor - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° */}
              <div className="flex flex-col gap-2">
                <label className="block mt-4 font-bold">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°</label>
                <ReactQuill
                  value={formData.information}
                  onChange={(value) => handleQuillChange("information", value)}
                />
              </div>

              {/* ‚úÖ Rich Text Editor - ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á */}
              <div className="flex flex-col gap-2">
                <label className="block mt-4 font-bold">
                  ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á
                </label>
                <ReactQuill
                  value={formData.terms_conditions}
                  onChange={(value) =>
                    handleQuillChange("terms_conditions", value)
                  }
                />
              </div>
            </div>
          </div>

          <div className="my-5">
            <h2 style={{ margin: 0 }}>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á</h2>
            {days.map((day, index) => (
              <div key={index} className="border p-3 my-2 rounded-lg shadow-md">
                <h4 className="font-semibold text-md">Day {day.day_number}</h4>
                <div className="grid grid-cols-3 gap-2 my-2">
                  <input
                    value={day.date}
                    className="border border-gray-200 rounded-lg p-2 h-12"
                    type="date"
                    onChange={(e) =>
                      handleDayChange(index, "date", e.target.value)
                    }
                  />
                  <input
                    value={day.location}
                    className="border border-gray-200 rounded-lg p-2 h-12"
                    type="text"
                    placeholder="Location"
                    onChange={(e) =>
                      handleDayChange(index, "location", e.target.value)
                    }
                  />
                  {/* <textarea
                    value={day.description}
                    className="border border-gray-200 rounded-lg p-2 h-12"
                    placeholder="Description"
                    onChange={(e) =>
                      handleDayChange(index, "description", e.target.value)
                    }
                  ></textarea> */}
                  <ReactQuill
                    value={day.description}
                    placeholder="Description"
                    onChange={(value) =>
                      handleDayChange(index, "description", value)
                    }
                  />
                </div>
                <div className="flex flex-col gap-2">
                  <h4>‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 4 ‡∏£‡∏π‡∏õ)</h4>

                  <div className="flex gap-4 overflow-x-auto my-4">
                    {days[index]?.images?.map((img, imgIndex) => (
                      <div
                        key={imgIndex}
                        className="relative w-[300px] h-[200px] rounded overflow-auto border shadow"
                      >
                        <button
                          type="button"
                          onClick={() => removeSingleImage(index, imgIndex)}
                          className="absolute top-1 right-1 bg-red-500 text-white rounded-full w-6 h-6 flex items-center justify-center hover:bg-red-600"
                        >
                          &times;
                        </button>
                        <img
                          src={
                            typeof img === "string"
                              ? img
                              : URL.createObjectURL(img)
                          }
                          alt=""
                          className="w-full h-full object-cover"
                        />
                      </div>
                    ))}
                  </div>

                  <div className="flex items-center gap-2">
                    <input
                      className="hidden"
                      type="file"
                      multiple
                      id={`fileUpload${index}`}
                      accept=".png, .jpg, .jpeg"
                      onChange={(e) =>
                        handleFileChangeDay(index, e.target.files)
                      }
                    />
                    <label
                      htmlFor={`fileUpload${index}`}
                      className="cursor-pointer w-1/6 flex justify-center items-center bg-indigo-500 text-white px-4 py-2 rounded-lg shadow-md hover:bg-indigo-600 transition gap-2"
                    >
                      <FiUploadCloud size={20} /> ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û
                    </label>
                    <button
                      type="button"
                      className="bg-red-500 hover:bg-red-600 text-white p-2 rounded-lg shadow-md"
                      onClick={() => clearDayImages(index)}
                    >
                      ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                    </button>
                  </div>
                </div>
                <h4 className="font-semibold text-md my-4">‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤</h4>
                {day.time_schedule.map((schedule, sIndex) => (
                  <div key={sIndex} className="flex gap-2 mt-1 mb-3">
                    <input
                      value={schedule.time}
                      className="border border-gray-200 rounded-lg p-2"
                      type="time"
                      onChange={(e) =>
                        handleScheduleChange(
                          index,
                          sIndex,
                          "time",
                          e.target.value
                        )
                      }
                    />
                    <input
                      value={schedule.activity}
                      className="border border-gray-200 rounded-lg p-2 w-full"
                      type="text"
                      placeholder="Activity"
                      onChange={(e) =>
                        handleScheduleChange(
                          index,
                          sIndex,
                          "activity",
                          e.target.value
                        )
                      }
                    />
                    <button
                      type="button"
                      className="bg-red-500 hover:bg-red-600 rounded-lg text-white p-3 shadow-md"
                      onClick={() => removeSchedule(index, sIndex)}
                    >
                      ‡∏•‡∏ö
                    </button>
                  </div>
                ))}
                <div className="flex items-center gap-2">
                  <button
                    type="button"
                    className="bg-green-500 hover:bg-green-600 rounded-lg text-white px-3 py-2 shadow-md"
                    onClick={() => addSchedule(index)}
                  >
                    ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤
                  </button>
                  <button
                    type="button"
                    className="bg-red-500 hover:bg-red-600 rounded-lg text-white px-3 py-2 shadow-md"
                    onClick={() => removeDay(index)}
                  >
                    ‡∏•‡∏ö‡∏ß‡∏±‡∏ô
                  </button>
                </div>
              </div>
            ))}
            <button
              className="bg-blue-300 hover:bg-blue-400 text-white shadow-md rounded-lg px-2 py-1 mt-2"
              type="button"
              onClick={addDay}
            >
              ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô
            </button>
          </div>
          {/* ‚úÖ Loading ‡∏ï‡∏≠‡∏ô‡∏Å‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å */}
          <div className="w-full flex justify-end items-center">
            <button
              type="submit"
              className={`bg-purple-500 hover:bg-purple-600 text-white p-2 px-4 rounded-lg shadow-sm mt-3 ${
                saving ? "opacity-50 cursor-not-allowed" : ""
              }`}
              disabled={saving}
            >
              {saving ? (
                <>
                  <FaSpinner className="animate-spin mr-2" /> ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...
                </>
              ) : tourId ? (
                "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï"
              ) : (
                "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å"
              )}
            </button>
          </div>
        </form>
      )}
      {message && <p>{message}</p>}
    </div>
  );
}

export default AddTour;
